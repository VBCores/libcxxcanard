# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/control/external/public_regulated_data_types/uavcan/internet/udp/8174.OutgoingPacket.0.2.dsdl
#
# Generated at:  2024-06-20 11:16:15.393058 UTC
# Is deprecated: no
# Fixed port ID: 8174
# Full name:     uavcan.internet.udp.OutgoingPacket
# Version:       0.2
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class OutgoingPacket_0_2:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    NAT_ENTRY_MIN_TTL: int = 86400

    def __init__(self,
                 session_id:          None | int | _np_.uint16 = None,
                 destination_port:    None | int | _np_.uint16 = None,
                 destination_address: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 use_masquerading:    None | bool = None,
                 use_dtls:            None | bool = None,
                 payload:             None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
        """
        uavcan.internet.udp.OutgoingPacket.0.2
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param session_id:          saturated uint16 session_id
        :param destination_port:    saturated uint16 destination_port
        :param destination_address: saturated uint8[<=45] destination_address
        :param use_masquerading:    saturated bool use_masquerading
        :param use_dtls:            saturated bool use_dtls
        :param payload:             saturated uint8[<=508] payload
        """
        self._session_id:          int
        self._destination_port:    int
        self._destination_address: _NDArray_[_np_.uint8]
        self._use_masquerading:    bool
        self._use_dtls:            bool
        self._payload:             _NDArray_[_np_.uint8]

        self.session_id = session_id if session_id is not None else 0  # type: ignore

        self.destination_port = destination_port if destination_port is not None else 0  # type: ignore

        if destination_address is None:
            self.destination_address = _np_.array([], _np_.uint8)
        else:
            destination_address = destination_address.encode() if isinstance(destination_address, str) else destination_address  # Implicit string encoding
            if isinstance(destination_address, (bytes, bytearray)) and len(destination_address) <= 45:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._destination_address = _np_.frombuffer(destination_address, _np_.uint8)  # type: ignore
            elif isinstance(destination_address, _np_.ndarray) and destination_address.dtype == _np_.uint8 and destination_address.ndim == 1 and destination_address.size <= 45:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._destination_address = destination_address
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                destination_address = _np_.array(destination_address, _np_.uint8).flatten()
                if not destination_address.size <= 45:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'destination_address: invalid array length: not {destination_address.size} <= 45')
                self._destination_address = destination_address
            assert isinstance(self._destination_address, _np_.ndarray)
            assert self._destination_address.dtype == _np_.uint8  # type: ignore
            assert self._destination_address.ndim == 1
            assert len(self._destination_address) <= 45

        self.use_masquerading = use_masquerading if use_masquerading is not None else False

        self.use_dtls = use_dtls if use_dtls is not None else False

        if payload is None:
            self.payload = _np_.array([], _np_.uint8)
        else:
            payload = payload.encode() if isinstance(payload, str) else payload  # Implicit string encoding
            if isinstance(payload, (bytes, bytearray)) and len(payload) <= 508:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._payload = _np_.frombuffer(payload, _np_.uint8)  # type: ignore
            elif isinstance(payload, _np_.ndarray) and payload.dtype == _np_.uint8 and payload.ndim == 1 and payload.size <= 508:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._payload = payload
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                payload = _np_.array(payload, _np_.uint8).flatten()
                if not payload.size <= 508:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'payload: invalid array length: not {payload.size} <= 508')
                self._payload = payload
            assert isinstance(self._payload, _np_.ndarray)
            assert self._payload.dtype == _np_.uint8  # type: ignore
            assert self._payload.ndim == 1
            assert len(self._payload) <= 508

    @property
    def session_id(self) -> int:
        """
        saturated uint16 session_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._session_id

    @session_id.setter
    def session_id(self, x: int | _np_.uint16) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._session_id = x
        else:
            raise ValueError(f'session_id: value {x} is not in [0, 65535]')

    @property
    def destination_port(self) -> int:
        """
        saturated uint16 destination_port
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, x: int | _np_.uint16) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._destination_port = x
        else:
            raise ValueError(f'destination_port: value {x} is not in [0, 65535]')

    @property
    def destination_address(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=45] destination_address
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .destination_address.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 45:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._destination_address = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 45:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._destination_address = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 45:  # Length cannot be checked before casting and flattening
                raise ValueError(f'destination_address: invalid array length: not {x.size} <= 45')
            self._destination_address = x
        assert isinstance(self._destination_address, _np_.ndarray)
        assert self._destination_address.dtype == _np_.uint8  # type: ignore
        assert self._destination_address.ndim == 1
        assert len(self._destination_address) <= 45

    @property
    def use_masquerading(self) -> bool:
        """
        saturated bool use_masquerading
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._use_masquerading

    @use_masquerading.setter
    def use_masquerading(self, x: bool) -> None:
        self._use_masquerading = bool(x)  # Cast to bool implements saturation

    @property
    def use_dtls(self) -> bool:
        """
        saturated bool use_dtls
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._use_dtls

    @use_dtls.setter
    def use_dtls(self, x: bool) -> None:
        self._use_dtls = bool(x)  # Cast to bool implements saturation

    @property
    def payload(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=508] payload
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .payload.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._payload

    @payload.setter
    def payload(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 508:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._payload = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 508:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._payload = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 508:  # Length cannot be checked before casting and flattening
                raise ValueError(f'payload: invalid array length: not {x.size} <= 508')
            self._payload = x
        assert isinstance(self._payload, _np_.ndarray)
        assert self._payload.dtype == _np_.uint8  # type: ignore
        assert self._payload.ndim == 1
        assert len(self._payload) <= 508

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_u16(max(min(self.session_id, 65535), 0))
        _ser_.add_aligned_u16(max(min(self.destination_port, 65535), 0))
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.destination_address) <= 45, 'self.destination_address: saturated uint8[<=45]'
        _ser_.add_aligned_u8(len(self.destination_address))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.destination_address)
        _ser_.add_unaligned_bit(self.use_masquerading)
        _ser_.add_unaligned_bit(self.use_dtls)
        _ser_.skip_bits(6)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.payload) <= 508, 'self.payload: saturated uint8[<=508]'
        _ser_.add_aligned_u16(len(self.payload))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.payload)
        _ser_.pad_to_alignment(8)
        assert 64 <= (_ser_.current_bit_length - _base_offset_) <= 4488, \
            'Bad serialization of uavcan.internet.udp.OutgoingPacket.0.2'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> OutgoingPacket_0_2:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "session_id"
        _f0_ = _des_.fetch_aligned_u16()
        # Temporary _f1_ holds the value of "destination_port"
        _f1_ = _des_.fetch_aligned_u16()
        # Temporary _f2_ holds the value of "destination_address"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 45:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 45')
        _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
        assert len(_f2_) <= 45, 'saturated uint8[<=45]'
        # Temporary _f3_ holds the value of "use_masquerading"
        _f3_ = _des_.fetch_unaligned_bit()
        # Temporary _f4_ holds the value of "use_dtls"
        _f4_ = _des_.fetch_unaligned_bit()
        # Temporary _f5_ holds the value of ""
        _des_.skip_bits(6)
        # Temporary _f6_ holds the value of "payload"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len1_ = _des_.fetch_aligned_u16()
        assert _len1_ >= 0
        if _len1_ > 508:
            raise _des_.FormatError(f'Variable array length prefix {_len1_} > 508')
        _f6_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len1_)
        assert len(_f6_) <= 508, 'saturated uint8[<=508]'
        self = OutgoingPacket_0_2(
            session_id=_f0_,
            destination_port=_f1_,
            destination_address=_f2_,
            use_masquerading=_f3_,
            use_dtls=_f4_,
            payload=_f6_)
        _des_.pad_to_alignment(8)
        assert 64 <= (_des_.consumed_bit_length - _base_offset_) <= 4488, \
            'Bad deserialization of uavcan.internet.udp.OutgoingPacket.0.2'
        assert isinstance(self, OutgoingPacket_0_2)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'session_id=%s' % self.session_id,
            'destination_port=%s' % self.destination_port,
            'destination_address=%s' % repr(bytes(self.destination_address))[1:],
            'use_masquerading=%s' % self.use_masquerading,
            'use_dtls=%s' % self.use_dtls,
            'payload=%s' % repr(bytes(self.payload))[1:],
        ])
        return f'uavcan.internet.udp.OutgoingPacket.0.2({_o_0_})'

    _FIXED_PORT_ID_ = 8174
    _EXTENT_BYTES_ = 600

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8e-CtK0{`t?OKcoRdgjQoM7JbcvTXTnwP{->z0{bZUKDq|Yg&}oa%p6)9)^>^nXT!rVK>>Y?FY#*5WsuL!VV_LB%T0!%q2jM'
        'Ip*kNjydMI#{>%)8!Un>kR0;;Rn<M!!=YsBfn?(t&}h_M_19nj|NXD}Yy8>%zh1pECI9Q6OnPqS2F-RRQlAI@r@Rx0X4{FwB+mR?'
        '4Esk`Mc{|{>fY)lV)*57?&rfl8P4_(wEZX&>Cl_%AGw*Qg_9Sls1JFx9q|w(W(vOL@TloWxkw|CHw!muepuw|u^+9kac5KH!~S%8'
        'OQe|}M?~@9NBaAhLpH_s{bKm@VgFE@=XvUPid<yFPe6VT-m6i={-f{tB5+3xS#6i+yqy!5drePL+O5BZ5yx*wnZF(h_bM1)7ioQW'
        'huR%KZwDe;&%Gf#3gQmW@^%=zV(2~BKe1L4qG`>`c-Nv=w4*;A-Wc|uYG*l*T%Ninq0ftsXZ5X2WVHXb?+*L>+ivU(KfczOn!4rr'
        'ncbyL+4z!)+|Fa0M>bDEBIRk%-r_+a>`u?lJz?Wfl!1vHa<(I^Zu^lPr>;n8UPsupW%?TO-0|d;RAfmUWy0F_bM+*M9UcTdds8I2'
        '?ZgnpPTsU{;Z3)QoE%)*aTg;^&bItCFXSxW6;bYk0xgq!Jg338SJ&RUx@ISFnp;s3cA#vcNE0Rd01I)a_xGttV>{zrLFBrUr%Xg{'
        'wI??g8NTJV$G3zX7D4VO*p_BB0}0FZGm=5!XC4UW+d@RmAte2@(xvyT_k#ZRGCS&>^j`H|Q;In13Yy7jn{DEE=$-1n2>xy3h1`g('
        'Hc}_se_;=drYY|Y`_FvD@f1(4N#(E5(>lnGv_&97h){vnU~{@+v;P>7mvG0=dqZ}*|D=XeTWVwCyjNI*AgE^VZ+C)h*gsWrIszk@'
        '&d2{f>>qyD&lSHn@lVZZ|B-f_4Ey$8M6zDki38t(QME)ELk=Xk4-=8{JWfro;&?tx*1OVw`f?mOJQvZ#p|oilnTm*<0meUZy$AxB'
        'z^;)8+7ea6zZlN4=|R@<eyoM@0cJgOgGcM)hDb#2@5Rz)JLEeMEhgNM553zZEh)dyk6_gF1;biiqkoXRKoM}7&l)s#YQXmCzaNo*'
        'vj*EYVEgs6N2_P-5w?H84yb?cqwfc6@7Sa4z<^Ebd5`US#}0xoW>xd?1phuXaU6S$Sp#-hy_=@Bj_f&(9b$(E?C~01JjJso?l^}X'
        'VUG{kQN6~19lPsj_5?dRU{CH^32*TH_&1u*j<F{P>?t*NKi(gvxle!Nx$HQ5YQRoR<N<H-?wM~zi#^Rw4A`@!q`}K`-+DfKhCMrA'
        '&+o|-M&SJm_e7UH$DSXs7i;puThM#yp6Rg{*oy=9@*VlbD2zFIUu&?J*vkWESF$CpU%79J>?E@XY(~+s@5Dc?{^|o+kG;ZX2JE$R'
        'O+ybPrPm+W8thf}+JK$9t7b66#%PRv<AJWtUT3EUY_{B|*4f+xUxU5DW(VxeZ@f>;!1(Vy6h7D-dvn0%N4k9tG-plyo_=WSvhT6^'
        '0c(CMIbas%y!GIDsyJe&S#!V^Mktt7I5=}}Yt~n+%b;41y~P#=Z1G!50y8o1?B1N!`Kn8zE{D2iDz4ZWwm4wtcH?6nG#5&YoUe0G'
        'mrPwQbxqXuP(wzw{#kZzz%JaAY}g{ry|`OGb-mTKR>z5n5)&g*GQ=A@KVVCBv@8%_E|nacI;mr&juaCoCQ1y9sP)(dc9AU&*z!Hg'
        '1Qam;`y;vRMvaLX6EP-UOtfgMNdCYbyTq0U><4?}<{W4)5q91#xiFDq;>JXci5U|yV|Y;#0uSG3KNzqd-j|%%GST?aIEG9FnfNi$'
        'b9d}WIVmpR*@YqKs6hEHb`q4!bn2i+eAb$3V9@8S=?2CPT1Oig`ped{4b1(UmfgVgziZ7lK;iFO3k@vs53QvJdxw41dZ)qOXaCrG'
        'zrohnKeg5x>|^%Nt&bb*r|ehkcdef`n8*GFbplJ+Z`jVD=m-=g9F<w8l{7r(_oir=reyIU7Y)<I@pryxpcHB9|BHr)QZz`}KJcQ!'
        'zMCU_2t|Wk*TetWqQM>&df%C%f%g2G)b8&`(eRKsGKvO;0<&ni-!&gz(eO<;yT78Lj*s0%!^0^V79UX2aQ`L4sk;;nC0Z5~US!em'
        '%}a*o|A&f($tA<%53p!ZG2_lf!#H;ScNPr~x@0)Nt7sruseC~f4c_14F;xklv1zIjK4-{UQ72H1fKuUp>IAA1erMDPs0?JOKrIK)'
        '>K`}zQrvY@k!3^g)W?6ee`;zq4!IxM)O)q#)V{iA>jCz*CsH9BXbJBHF?a3Ei;KXeW?MH-w|VLc*Usanbv@37YS(pAjHAwGNkwEf'
        '2NfO!@is;i$$6S>iya;&0sgUg{(RH?W4&9_pq`y<EQUP$Ss_v`yLcj^9++!y$LVIK`g_FtHt*Ryvx~^T>(pgAi(0RtC3}K;Upe2T'
        'Zel8%oQ}t%NCd<=bw;~g-@#5&e~SoVr$i!7L<CM`L$900q0OV7oyA4!2-Uz8s^>_eu~Gp>vK-@0o|=~Gjbato(1hxSVPsGCD#eZ?'
        'FmdtxSvz)ek!SNZcbqttyV5JIUcYH)iEw;yDmC4-F830T2ewb`c~XR(<*ASPX-Qx9>T7M@RJetsv>u8uP9fCDtpw01Fb<<5IiOQy'
        '%l5hRB&w7X*{o^R{z=VU8py-Ah-5D}OSq$<f_EemKb0WD_XKzmQLfv_(K>_$(Po)XZD&9xBmz7FM7J)K@UmvrgL9`to+O}TzMN~?'
        'R}{*!Wy`i_K%)qoq%=ngrWvQ}GxnbUoi;T>^UqvbY@WHW)I8HXbBAfhd}6HP6a*F*7S1d$xSgftrStsk@&f)-A4_~uEH9kBxUhWj'
        '?AdcOCV^@<^9m&-h>BK4N>LamFwTrYOWF+Vg?HjD7$GcxFib+8g&w*hg<9rlot1YluP*QTQHkU{{#;s^(VI54VeoCwnz);<V`r}3'
        'Vt=lG=-oID1dnPxZtrE*P`&IgRLi}{MB6kdYPqjm*?}SCHr?N_JKWi{XZ@yV&I9S0ynHfp00cddkPoh}+=34P+UCaE{a;UBdz#jE'
        '^MHJ5|Br8j$|@FIPkCtHqPrB*FI?k2Sk_J96se#0n)YfMC)%mfRTjFVuzKs-O)>|v^sGo|nsA%ehl#u{&<*%{CK)>3KfDG7Vw3fo'
        'D&DjG=O^DB*ox^&$n;0}%akHEav-A}Oo8)_eT}K9+IAQ9xAPM(5O_<i|7v)b#_mA8t=|36TTv^l8h!I?>d}YPc{f|)N9*nNKh)no'
        'A^MY==N@NMUZ?e|C+eqO`lJf+^?G?Yb`-;YbEjcCFdo#AjTHFxm2MZH@wcjYr*D}^6m9#!@L1r}S71VleqIc3wI$LHTyNO4=+1{y'
        'aHhN+-7g_u0+%ZNUu2(OSh7349DW&Yt&Fhb@Ue;ukdXa!D4f7h=~@Pjvz#~#Wr&l|AorQjeUGMngKU;~y7As+`{JcD(rquEyRaaG'
        'Etd16)2>Khd#Tv+#kL02^yN6Bi$%EsCPTBfdAsEp?4y0<`mGy(&~9D5-oAC~8s!i_1bY4`6WE{oiPe%OMKMo>ebd2j3X#;!4DlH8'
        'h=v9vb;)Rs&_wBjydgA-8xShIR1pP~n1G0-2w)7{SK5`y1(`RJ7T@s@#Fa_+YRQL;G9f1DHB#Y#gP=zaz^#}8kuKi?FA#SmwjtFx'
        '5?Rx})835BQ52U$xE2mjRJ%E|uwc@!Nuddh_g^aQSL{$2q;uuk<+AA;QsX?RO!#*Hu`YQ|Jk9X_J^dZ;Kltn?4HWsm7~U8X%timW'
        'aTl)L>8X2mq~O=R6W+Wx>;0?O^#0BJwf7(1Z#QP3&y7du<4yWFMb4prsO?gCrVBRi@QeQA?XJHgTzSQbE}gZ$KG{FkR*4T@1)`ns'
        '+#8a4<zC=-hW*FZ;>_P!qo-dEXZww}hW-6sOxOMPB|Zj{d8BcGjffq(_J@u3Ur35h;5+S9tQP^TJi3pE9UoBF1Tmw$C^+mtQn<;m'
        '|Kie_i|58}3^o^<i%pX7FsIve$J-vyz+_5yrQkBRd`Aqw0Gj{(8GUUogcA6=Ob4abOoLXbo=WX>DkQJHQ9>jkP;&};#8u5DCE47*'
        'wsO5`Su0UbQIS{JMyYePdU;ij_Dtj9gA@RzPazc2T`oc%M%H~pbt7-r!ezRf!3{cqg}T$HR?IAON$Eti$Ey_r+V}a9>q|_ioziF-'
        '^NLJn+dF_HtPAEN#pmkaXeF?za)&Z7Q(EFHd_%Z=om`sQg`bt?MWGBSNz=Yrz`&IhN~c^VEK>NHH4~0Zbp~R)Dw9nia{?MfvXgE#'
        '>meTxH63*yuyW7D^@tAE=YAl~)w;sLfboj%R#Mc?6a%Ha1RPVZ+9%TNOb8@i%0bB$QIHj>y!Ys&0%EizQ?6J~g;c1z7M9AKJaRd*'
        'R;3VL1a#FgK*kd}Lfx)35m%NoRBUx=LnHTOC5S8{#gf>gi$^-a?%8gU1X`IT78KB3A90ZkrL1hK%1%1mQgxDenXQ+^$T?vUOq;3-'
        'x4dau-snu@Ja%FfD0wD=uG|Q@>(ua^`F3o_oh?5uG7GsI_*?f&{OgOK0vUeX8&Nkzv20nC`mQ(*T}O?hK#l17DM;&WVi)TXNvV=R'
        'dA$@lENs&8N>{I!)jObKN^r`>?NZ`pke7N4Mb2gF5FyN9C4hk<+<49a#JB<$8v2pSLQ5$_)3PdqDakbe2%(s91Y&|q_Jnd~j8#<?'
        'cc^xv)u3xXhLK9+Lz+*vgRDQ7_eArwH?OLExj=bU7S>r^l2t|{>)P_JFN!=V)U`CGeaQm3L<}Lq2?|-3?k!H9WkqO8)078%Mkd+e'
        'vS5X87U?`eg%*>wH`c3Upo{8E`JOc1^5xnUuOwcQTFFA1(gjZPFLDi3#({5g;^3b^I;CNH4bw12BCwTD8JXB<@*9eMJ=X8|0rGy8'
        'dt`C2rB75!OW|S1UoT{3uo9I>2L^(|@PAz4w}P&c4;@ArOi2-FD9ez<^D=iq<VXyIBm?V`kCDe5F&r0AfYFe&>1#qBaV0BTTV8J*'
        'URWn22irA~E1jYO&K^3J-jATBETt;b=B1nTNW+*9hJA`3z@gvmS)-Co=U|<<P<bM79ajs%nMzwkx{~Ol92kMDK2zFZR^{;WjK~u*'
        'JX=+CkjyCAY6m#Rz4EuYaJ<L|_{c6N5QgG5qj;P0Ze)=;$xVVcqZ784QLoNZT%Lu~SQil<1#|XwHQZj&=Ww!?3{*UvMcO#0IFMq|'
        'I<>Hz-lg(`A?jvXSY$%o=cjNMD>XTBsxTuNmE|Q|P}irUtd2mcOd7q@&HplxXCph5f-;1p404nim01haqkN?`R!hy-bvvnca73y~'
        'sM4`21jIVg8?mKw1gjcH0XmO~6vZp0;jH`-%2@JX&s2%|jCPJXl2iUp20-9~k%bhvt<vKgbqno_3Jxh;s?+7+(`l(QB@CHMj(!B7'
        'pu0_nmpX-zrXdd)$M+@$-IVsfhM83Cox8Ynab7!>5l!qFrVT=6R5Wv$B9Ea-U;a{~SuscNPG4OuVKP#jVh|a#U7gSEVoZ_wNd6#0'
        '6HveJ82vV79Aq+xl<9|b1Tpzj9jZ`p=$~!q1e$!cs4_!f^wzjTm;@RbGV2v*uU={Hs%mXj%_84GFe`njEEjiKxvIIO?ke*G`l|e^'
        'JVPbdPrflLWi#TN3_<L8yr83D=>Yv~Ld6<`AZ??pA_Y$oZPIxIYzhMKnmt;@EO7}~5ZL>CO9e-5wA`p_%A&@w;rVggDC|3)a5l#Z'
        '`SJwWs%10EdbIlVS+p#Xq(dELF?_Gaf~^BfwNPnql$<DML^;Qu=w+xzWsR?oR3uHV9U1)yDMq-HBrJ2MzB;k23Li<eI`MJ*M5YOH'
        'tSWX?@+1pM`+b>OUyV?ZjSA2zNa{g;v=!@8jSe?5GO1k>S8kntlT`!5ZZEEJ4INrznh60(AHf?UnC-w_Du7XLSK7*)PLAZJMU)k('
        '7=>-qz*NzKnH@TR$u_A8Bdg3&fXbw8=`3ojRE5gqu|6dw0pWwJ5YLM!B`a0M)k;+f21rh8gvx5K3`U+G?dH)Ck`XpbtC0aHiY?7Y'
        'B=i{@`4+O$u2yEOv#P4ntxJ2i4x9EG8JvzLR0~Peki+vwKYF9OQ%_ZZq8eK|BUN~goza!fVuIt*`7n&yJeHz@hzHpy<0<<#$f**U'
        'YxrHcY4S8?mf(tj_oS~)m7&mgI0tJK>LvHO4@FG<tcY_?UKru32t%IwpQ4nKdy+rklN-c%j}mS>cANqdB!8-HQ=jc=`HsApKGG^H'
        'Hywtw_mD<W9h78aCnY4!`mxXG6r?=40Q^Y+Dn}nx>y@h+OI~-?YBDraIW(5E3O&5mZ=~ExS4&saX~4*|M?JLCcWDB8L$aVzYRv8+'
        'BGucWP-wOfWp7PZ8?Je3TKgGd+2&PMlS+;Z2CTAkB*PIb)a|L}+o*>$e%vbaEW}*H`)>Nu>F&)bL~690scodQXFM7mvMUf!htq+l'
        'Ae;p`7FqY?suin9_|;KQl*6&n4?t@<LzRHYN~!Jy$5`B@MwL(@^63zw+$hven2%tq$^(xxK04*Cn8ajRhN}ssXvL0SCIIrN%1=kJ'
        'fwEksQN$6NAH^mKJ+)eZcBgovq#r&(xopi?M>w1sUUa^sk`vjCQ{Gzzpb4kr6>)W5hin8$n$rx#-SKpQm`wuiR1tzKOEEMi=*lj$'
        '-K~`>lW+};XnR`GErJBb4js7Ap_7jlVD!8605qzMjO=z-0#@0d>XN9SZ7DdB51Cg{LnS{PkvL3pv#R8i6T`9YyzH}%Y>fx&aSF+V'
        ')$t^lh!LwJz5lW&NqHc7o~oaiq(04r+OTS%3fPW$W1>2}Gf#5oEwjll4^wS<ZZ41Z9HG=iTj9ZJ!dw+PMt-Vk-!5IP=dV+yUgw3{'
        '{T7^!ze%R23dcmYCFI$-#$9<dQJ!YzUP^|X0OJM_Cmb5a(dkZ1`50McyjLeoW)ve9wjh+CH;P+vChGOg<(2DlZ^Oy0%PajSbjx+u'
        'Pkr%ra*MNiy7807)YNxp@OW#tKiy80?1rpS=(a5WI2c4d*j*D;@7Bg3yBf6d=U75dufOr$SL0{BPHWJZIAQEnZNWyh;2cK%<zxb5'
        'ul6ADCPw|$WCCNaY6K2c1Qsyrmy-#MzdC|fYSKG+^ZBu{Nz=uISE||V9r6x)N4;aD!4uxB*Ytkv{nq<W)$5}+pV+v7&u`Ng+*rcr'
        '7aN!G+4}nA#xlKl8y~Y9)D_<N5q-QvA1n0nE`404k5&4(LLcwZ$B*$rZMlsPh@5w7gW>P~!8Wx5qkP!<>dF3zwyXcgB5B)0z{FqU'
        '|EmJ~9&aJod)-3#c;B6FA$;{D$+x^!kQtW`Y`UW`;Vn&W{x{Qr=HX98000'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

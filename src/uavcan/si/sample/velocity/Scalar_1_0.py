# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/control/external/public_regulated_data_types/uavcan/si/sample/velocity/Scalar.1.0.dsdl
#
# Generated at:  2024-06-20 11:16:14.650950 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.si.sample.velocity.Scalar
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.time

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Scalar_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp:        None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 meter_per_second: None | int | float | _np_.float32 = None) -> None:
        """
        uavcan.si.sample.velocity.Scalar.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param meter_per_second: saturated float32 meter_per_second
        """
        self._timestamp:        uavcan.time.SynchronizedTimestamp_1_0
        self._meter_per_second: float

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        self.meter_per_second = meter_per_second if meter_per_second is not None else 0.0  # type: ignore

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def meter_per_second(self) -> float:
        """
        saturated float32 meter_per_second
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._meter_per_second

    @meter_per_second.setter
    def meter_per_second(self, x: int | float | _np_.float32) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._meter_per_second = x
        else:
            raise ValueError(f'meter_per_second: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        if _np_.isfinite(self.meter_per_second):
            if self.meter_per_second > 340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
            elif self.meter_per_second < -340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_aligned_f32(self.meter_per_second)
        else:
            _ser_.add_aligned_f32(self.meter_per_second)
        _ser_.pad_to_alignment(8)
        assert 88 <= (_ser_.current_bit_length - _base_offset_) <= 88, \
            'Bad serialization of uavcan.si.sample.velocity.Scalar.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Scalar_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "meter_per_second"
        _f1_ = _des_.fetch_aligned_f32()
        self = Scalar_1_0(
            timestamp=_f0_,
            meter_per_second=_f1_)
        _des_.pad_to_alignment(8)
        assert 88 <= (_des_.consumed_bit_length - _base_offset_) <= 88, \
            'Bad deserialization of uavcan.si.sample.velocity.Scalar.1.0'
        assert isinstance(self, Scalar_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'meter_per_second=%s' % self.meter_per_second,
        ])
        return f'uavcan.si.sample.velocity.Scalar.1.0({_o_0_})'

    _EXTENT_BYTES_ = 11

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8eh+kJ0{?YaZEqdL6~1=j_q-V=AtVqclqPnYyMV#LrKJUo($FE72q&%8m#k)Y$9G2F-Pz8}Ui%_dDj$mCYNf7}t;A2@C-4)H'
        'S`|Lhe}MW6_?DitJA3bSNG#dU*?BqV%$akZGyd!Ge_lA*seg(WvteYS*z*n7lEv~97R221LzQI8NXx6@<hIp$Xmic)4l`aotkyoQ'
        '{!*<LGk(evm?t?Kge>)p^bAWf*gfE}3Z)%-+aZgYu8Mhoz_pPotwg7o`>m57R&<JXKC3>hiY1>}t7VW|ZmK_l@~5~pT2&P@Hzkjw'
        'u{(=?#4PhI`Y5KGK`~QYao$;(aBq8<hC-`Ue!`=>Fkmb=T!}fc(0U?HfOT=kZC`nsADNbkv~mD`tlUeD?58~XAho>D_0b?L`GK^4'
        '%+tOV72O0cLuRa>s0h4#zBqrURfOBTEttEFQy7}RRUcQySs#2%Bc`KCMTdC+M_Wo{sFmTNN~5Yc?nf%DcK$cr>D(2Zq<Io>P1G)#'
        'SY?P6%o4!{oMg-x9uXtckQ1X4PM8K0n&}});4`&Erm((VX}v{M>c&B-(y|ZJtJ34%^?DTsm;}u5H6jg(_^yPQkc{gt%d%L8%)*^}'
        '1l5GO)~IK+1uf-<FTzEUfD_ICoWtF~_Fb)#v34`MzFHYcz%j0`6T^AEC{&==WN=WK_F+^HB%G~wMb_3A;S}K9fW<jSFRdaeA7Gf^'
        '&u*;t8~;Z08#lTT60$EN@RNrOe0*zhk&rG~zrS(gXk=kI3si2&`ugSu8FHr0b+RvHC~ykOB87q=?~)sD)H)~jg5Nphjwbsmk0USy'
        '76{4Hl!x3Hre!>AT!2I%(wdRC5H{Eb-r|jHfK@A0Zg5p?9;TxlR1gN%Krug%5U<oi9+OZ@BaPP_W-EqVkYRW0-5yy@l_fXdUn7tS'
        'Da2BPy^v{0iaf)3y-9*06e(KF*f3VCzGJv3-~z99{BC<yBtiH4u-FI|$9Th-ZvB{d>*bA!T|N#}!eOAvQ9HT^NQ!F~(*k3laW;jE'
        'ArM64RZs}0iuo;-Vwu=c-H8=(*-2OErg%xbOgmUl;#yNWbN70*_tEcql~^mT{+?^~xam6I;NCDAd#Tz_y{ee?Ylo`hg_acfK?Vtj'
        'WOjrS=0C3Ulf|t+Vxw4qBZoL@VE(3)vCcbm>ND`n1bM)Vl?fj7gJHw4c#2hVQM@j?IS@+3!6=jykE+Asl)ozvc;w?n`7)|{#j<Zy'
        'u0swJG50eDbWzM9#4@Ogg*(9N2X}DvA<)y*D?l7VA&pOG5*9)}TCHO6ksm;A;TeicSsp+E`<nOj810Uk77jDp5G?4ym{rB)Cz7o9'
        'n)j-QL8~m%+KMlj0q2kgd{?N|Aza44dQIV@1%ehZYk&uo23EjeWBx*MGbmiUuk>EGt_(9_v%b69C}fNkM=A{zs5o!9pr(Sc9rzHk'
        'FQC>Sx+(#pi=1K1+dzRPV5ydk>slPZ8l}4?<DuM@6ZsB}Vvl>s$w3Suy4vQ;n8M-E_VMqkIPspeAJ*U7e3Z<^F<)iSW}l|S43j{?'
        '{XkT2^F%pv{0OR&S*6FVXx0w}&_E^rSe(AYBIL*)ED{W7dwC3Pd-(XQ*!V}aN;gXrKts<O4Hccw12|_QQ*3V_umcq4u*E^Ppi(-8'
        '`#L3^c6bbNx}?Y5_YC4xNoU>ooEx8axZuVY5ob%f<kp`+oG<A~#N#DB<<_4@Tq@}qH@}QHQ_^Rgo)yGrN_rOYOi9lno+{~i#1kcb'
        '7ICqp7u^2moZXAg&LyYkd1vnh#7iZ;jCir6FCsoyQi6D)q*oB1E$K^$=S%t{#B(Km8S!jMe~h?N(yPv|YlzDwU3LDgA)YSjPn@4W'
        'MLb#3>(1Y<JFn;beg$!%q^~;vUqhTL>AE||>n<K|xbxKadaR^3+_~O#@!fRi`&o1E^eu-!clZm3Z#(>@!(Tak$Kfr9I}U}z1BVYB'
        'e(vxKhhIAU%Hg*TzjOF~gSY3WoN%EPR$F1S6>hb{PAiC3IB10jt?+p(e9;PDw!&Af@NFx6*9zY|A%|BUbOz`rNbzngK!S(PvtY;X'
        '&b6Y04Q%w<ga_fmO=zk1$Qu$m7=aG9F0MTQ#R==fV<yMv<J*5<?o9qXdi2OOliJdmgad>7P{h7_BZ@WgHFO#A4r=|6SQh^k-{j)G'
        'L$TEp?~7lrid*6X@f$(KhvK&A71IVf!ff-VhlbF;>Z{^(^R7S2>0<j3^^1FAr(ugfi2EZ_2}jcX38Fa%eH$BD`b5Sm78=5W9)bT7'
        'JW-o3_UIIxHijmjz;6n6|J{Ru{sdzYU@UHM(GD!y886yH^7_FrUX=HLoU1irBMkrm'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

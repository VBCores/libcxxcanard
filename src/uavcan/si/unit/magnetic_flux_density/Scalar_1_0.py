# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/control/external/public_regulated_data_types/uavcan/si/unit/magnetic_flux_density/Scalar.1.0.dsdl
#
# Generated at:  2024-06-20 11:16:14.335586 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.si.unit.magnetic_flux_density.Scalar
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Scalar_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 tesla: None | int | float | _np_.float32 = None) -> None:
        """
        uavcan.si.unit.magnetic_flux_density.Scalar.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param tesla: saturated float32 tesla
        """
        self._tesla: float

        self.tesla = tesla if tesla is not None else 0.0  # type: ignore

    @property
    def tesla(self) -> float:
        """
        saturated float32 tesla
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._tesla

    @tesla.setter
    def tesla(self, x: int | float | _np_.float32) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._tesla = x
        else:
            raise ValueError(f'tesla: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if _np_.isfinite(self.tesla):
            if self.tesla > 340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
            elif self.tesla < -340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_aligned_f32(self.tesla)
        else:
            _ser_.add_aligned_f32(self.tesla)
        _ser_.pad_to_alignment(8)
        assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
            'Bad serialization of uavcan.si.unit.magnetic_flux_density.Scalar.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Scalar_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "tesla"
        _f0_ = _des_.fetch_aligned_f32()
        self = Scalar_1_0(
            tesla=_f0_)
        _des_.pad_to_alignment(8)
        assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
            'Bad deserialization of uavcan.si.unit.magnetic_flux_density.Scalar.1.0'
        assert isinstance(self, Scalar_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'tesla=%s' % self.tesla,
        ])
        return f'uavcan.si.unit.magnetic_flux_density.Scalar.1.0({_o_0_})'

    _EXTENT_BYTES_ = 4

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8eh+kJ0{?YWQBM>x5MG1>1eFlb7a!yaF(xbi1x@Z{1utTJGflfKw@te3rk!5yOi1KGBBqHZjQ`YkoO0kH%D(KhGxN=SGhaV1'
        '{QNavTzu(CH<3Y_k_F{8H~JG7MwP5~ZRdgph3WnQ_*g^q>iwisc!tl8@d$TPk6GT5|9Rx2n%gqyGFlB~%ZFBhuGyi9V<wd)m`Qn1'
        'bHhERWj0biXlJo0($a@Z`wXkOsyM-8Osk9ocr7BRfFJR;2LA+M>h-lUa@N=ilN>mM-0f}Yo!6}fJ)(%aed9R%&25zl4a_Jzga)fE'
        'f~<J});g)M*-VcHSLr#ed`-T+>>?V)7kr0llLg>baxbp~eI=Yc9Su?D!iS#MK=cERrGIG?#<%t2`geYQUQ}}@1RF)uOFf#4;g}Yf'
        'bTy`eZh6|cHZ&$C)6E=Vv)!x*A|qAjRn0+3JWUVSp&l#AI_H6DiTi1t1s8p-$YB)gIJKIV^3P~NZ4O8X<3YYXqtVR0pxTYgo4?a('
        '3ap(4?+kHJV^H35G9PzQ7?OZj!)S8d*-D7);#4sN5C~u)s|M4<|LO+Q+Eh8^%W}8On?%S1-e3(6)T&n&@@hxAR(RSxZFXod!cdXz'
        'tHsY2K!I@cjOpGh4R0>a2XwrYK$>T+!?bl9NSL(35ku-^PqmI@m6!LnQ=WtKGa)Uqy3r)grk~aZTuN<+{{%Hv_U=bRG$%K`gfQYJ'
        'D*TQ+)z*(7=mm9CAgq?7AiAx#S)*j|aW<B+PHF5pdxfcS$L+-<+m9lMD9YaeA0r0;0{{R'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

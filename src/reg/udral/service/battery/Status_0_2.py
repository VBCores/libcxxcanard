# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/control/external/public_regulated_data_types/reg/udral/service/battery/Status.0.2.dsdl
#
# Generated at:  2024-06-20 11:16:16.498017 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.udral.service.battery.Status
# Version:       0.2
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import reg.udral.service.battery
import reg.udral.service.common
import uavcan.si.unit.electric_charge
import uavcan.si.unit.temperature

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Status_0_2:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    MAX_CELLS: int = 255

    def __init__(self,
                 heartbeat:           None | reg.udral.service.common.Heartbeat_0_1 = None,
                 temperature_min_max: None | _NDArray_[_np_.object_] | list[uavcan.si.unit.temperature.Scalar_1_0] = None,
                 available_charge:    None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 error:               None | reg.udral.service.battery.Error_0_1 = None,
                 cell_voltages:       None | _NDArray_[_np_.float16] | list[float] = None) -> None:
        """
        reg.udral.service.battery.Status.0.2
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param heartbeat:           reg.udral.service.common.Heartbeat.0.1 heartbeat
        :param temperature_min_max: uavcan.si.unit.temperature.Scalar.1.0[2] temperature_min_max
        :param available_charge:    uavcan.si.unit.electric_charge.Scalar.1.0 available_charge
        :param error:               reg.udral.service.battery.Error.0.1 error
        :param cell_voltages:       saturated float16[<=255] cell_voltages
        """
        self._heartbeat:           reg.udral.service.common.Heartbeat_0_1
        self._temperature_min_max: _NDArray_[_np_.object_]
        self._available_charge:    uavcan.si.unit.electric_charge.Scalar_1_0
        self._error:               reg.udral.service.battery.Error_0_1
        self._cell_voltages:       _NDArray_[_np_.float16]

        if heartbeat is None:
            self.heartbeat = reg.udral.service.common.Heartbeat_0_1()
        elif isinstance(heartbeat, reg.udral.service.common.Heartbeat_0_1):
            self.heartbeat = heartbeat
        else:
            raise ValueError(f'heartbeat: expected reg.udral.service.common.Heartbeat_0_1 '
                             f'got {type(heartbeat).__name__}')

        if temperature_min_max is None:
            self.temperature_min_max = _np_.array([uavcan.si.unit.temperature.Scalar_1_0() for _ in range(2)], _np_.object_)
        else:
            if isinstance(temperature_min_max, _np_.ndarray) and temperature_min_max.dtype == _np_.object_ and temperature_min_max.ndim == 1 and temperature_min_max.size == 2:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._temperature_min_max = temperature_min_max
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                temperature_min_max = _np_.array(temperature_min_max, _np_.object_).flatten()
                if not temperature_min_max.size == 2:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'temperature_min_max: invalid array length: not {temperature_min_max.size} == 2')
                self._temperature_min_max = temperature_min_max
            assert isinstance(self._temperature_min_max, _np_.ndarray)
            assert self._temperature_min_max.dtype == _np_.object_  # type: ignore
            assert self._temperature_min_max.ndim == 1
            assert len(self._temperature_min_max) == 2

        if available_charge is None:
            self.available_charge = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(available_charge, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.available_charge = available_charge
        else:
            raise ValueError(f'available_charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(available_charge).__name__}')

        if error is None:
            self.error = reg.udral.service.battery.Error_0_1()
        elif isinstance(error, reg.udral.service.battery.Error_0_1):
            self.error = error
        else:
            raise ValueError(f'error: expected reg.udral.service.battery.Error_0_1 '
                             f'got {type(error).__name__}')

        if cell_voltages is None:
            self.cell_voltages = _np_.array([], _np_.float16)
        else:
            if isinstance(cell_voltages, _np_.ndarray) and cell_voltages.dtype == _np_.float16 and cell_voltages.ndim == 1 and cell_voltages.size <= 255:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._cell_voltages = cell_voltages
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                cell_voltages = _np_.array(cell_voltages, _np_.float16).flatten()
                if not cell_voltages.size <= 255:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'cell_voltages: invalid array length: not {cell_voltages.size} <= 255')
                self._cell_voltages = cell_voltages
            assert isinstance(self._cell_voltages, _np_.ndarray)
            assert self._cell_voltages.dtype == _np_.float16  # type: ignore
            assert self._cell_voltages.ndim == 1
            assert len(self._cell_voltages) <= 255

    @property
    def heartbeat(self) -> reg.udral.service.common.Heartbeat_0_1:
        """
        reg.udral.service.common.Heartbeat.0.1 heartbeat
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, x: reg.udral.service.common.Heartbeat_0_1) -> None:
        if isinstance(x, reg.udral.service.common.Heartbeat_0_1):
            self._heartbeat = x
        else:
            raise ValueError(f'heartbeat: expected reg.udral.service.common.Heartbeat_0_1 got {type(x).__name__}')

    @property
    def temperature_min_max(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.unit.temperature.Scalar.1.0[2] temperature_min_max
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._temperature_min_max

    @temperature_min_max.setter
    def temperature_min_max(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.temperature.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size == 2:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._temperature_min_max = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size == 2:  # Length cannot be checked before casting and flattening
                raise ValueError(f'temperature_min_max: invalid array length: not {x.size} == 2')
            self._temperature_min_max = x
        assert isinstance(self._temperature_min_max, _np_.ndarray)
        assert self._temperature_min_max.dtype == _np_.object_  # type: ignore
        assert self._temperature_min_max.ndim == 1
        assert len(self._temperature_min_max) == 2

    @property
    def available_charge(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 available_charge
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._available_charge

    @available_charge.setter
    def available_charge(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._available_charge = x
        else:
            raise ValueError(f'available_charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def error(self) -> reg.udral.service.battery.Error_0_1:
        """
        reg.udral.service.battery.Error.0.1 error
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._error

    @error.setter
    def error(self, x: reg.udral.service.battery.Error_0_1) -> None:
        if isinstance(x, reg.udral.service.battery.Error_0_1):
            self._error = x
        else:
            raise ValueError(f'error: expected reg.udral.service.battery.Error_0_1 got {type(x).__name__}')

    @property
    def cell_voltages(self) -> _NDArray_[_np_.float16]:
        """
        saturated float16[<=255] cell_voltages
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._cell_voltages

    @cell_voltages.setter
    def cell_voltages(self, x: _NDArray_[_np_.float16] | list[float]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.float16 and x.ndim == 1 and x.size <= 255:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._cell_voltages = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.float16).flatten()
            if not x.size <= 255:  # Length cannot be checked before casting and flattening
                raise ValueError(f'cell_voltages: invalid array length: not {x.size} <= 255')
            self._cell_voltages = x
        assert isinstance(self._cell_voltages, _np_.ndarray)
        assert self._cell_voltages.dtype == _np_.float16  # type: ignore
        assert self._cell_voltages.ndim == 1
        assert len(self._cell_voltages) <= 255

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.heartbeat._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert len(self.temperature_min_max) == 2, 'self.temperature_min_max: uavcan.si.unit.temperature.Scalar.1.0[2]'
        # Element offset: concat(pad(8,concat(pad(8,pad(8,{0})),pad(8,concat(pad(8,pad(8,{2})),pad(8,{2}))))),repeat(<=1,pad(8,{32})))
        for _elem0_ in self.temperature_min_max:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.available_charge._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.error._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.cell_voltages) <= 255, 'self.cell_voltages: saturated float16[<=255]'
        _ser_.add_aligned_u8(len(self.cell_voltages))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.cell_voltages)
        _ser_.pad_to_alignment(8)
        assert 128 <= (_ser_.current_bit_length - _base_offset_) <= 4208, \
            'Bad serialization of reg.udral.service.battery.Status.0.2'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Status_0_2:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "heartbeat"
        _des_.pad_to_alignment(8)
        _f0_ = reg.udral.service.common.Heartbeat_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "temperature_min_max"
        _des_.pad_to_alignment(8)
        _f1_ = _np_.empty(2, _np_.object_)  # type: ignore
        for _i0_ in range(2):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.si.unit.temperature.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f1_[_i0_] = _e0_
        assert len(_f1_) == 2, 'uavcan.si.unit.temperature.Scalar.1.0[2]'
        _des_.pad_to_alignment(8)
        # Temporary _f2_ holds the value of "available_charge"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "error"
        _des_.pad_to_alignment(8)
        _f3_ = reg.udral.service.battery.Error_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "cell_voltages"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 255:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 255')
        _f4_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.float16, _len0_)
        assert len(_f4_) <= 255, 'saturated float16[<=255]'
        self = Status_0_2(
            heartbeat=_f0_,
            temperature_min_max=_f1_,
            available_charge=_f2_,
            error=_f3_,
            cell_voltages=_f4_)
        _des_.pad_to_alignment(8)
        assert 128 <= (_des_.consumed_bit_length - _base_offset_) <= 4208, \
            'Bad deserialization of reg.udral.service.battery.Status.0.2'
        assert isinstance(self, Status_0_2)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'heartbeat=%s' % self.heartbeat,
            'temperature_min_max=%s' % _np_.array2string(self.temperature_min_max, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'available_charge=%s' % self.available_charge,
            'error=%s' % self.error,
            'cell_voltages=%s' % _np_.array2string(self.cell_voltages, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
        ])
        return f'reg.udral.service.battery.Status.0.2({_o_0_})'

    _EXTENT_BYTES_ = 600

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8fDd$L0{`t>Yiu0Xb*3m=qE?pmvSqi9<8jhBWV9UWVabl|*j|y8L{of}q#mu2F7EE!<(=j1%w`@W*H+><NDVuk)=Inq@~<e0'
        'qCtTEC{Q42(VziZ6!}x2KT{M10u(4xpg_|8a$BJ4ckW|$c6LdcDEy;n324q}=FYw6o_ikOIrr{YANck^y*MKO(x=)TCvrTy8u8F&'
        'p8E!?dEBnngH}6;+?aRMV>8@yTex-BI&I$lpgZw)_siY!^ib9HeI9njNP28F4wHJEguK7WgH@lk(1jK9bvtoF=Gho#)2(y6#^RWV'
        '9eXuqaT0aYvFaudBRBA=zr(lm{RiFok@?Ygx^H*Wqg8wny0s+cQTL1Jd<V|6R^9Z$t1kDP9y_I~!(vvAiAQl*Jrt$%Q-j=L`mMmX'
        'uX7g0HO}I$ct|`9Rt^v=;v|L_kLvFq|42QpaOSu^kD}dr+G$GdkmT=fVoIlP`jNZtb7#(v`8p5#<$bhTbK|PV{q<OM=SMN&I*a0J'
        'D{wI3iS*2}>4-kFr}1uqUO~zSezUvMO&_U7G4mZ3I{A*?OKO<ggPY7tz`+AmC#ZMRkuIK|PRFJLpT3DRCLoZr`p%vo6;tB;{0Ma}'
        'p4I)V-k6<T?uyHI{%CY$WKD3(3;gv-C_~FaPcgTGhShR?x5YfG9c=N?s$-0#)sCSNb_uMzb>?}UvegQr*ou-`)QMu=iYyj#E8247'
        'y5NrG`f*^z=w6OzkqoRY!F~B`lMA=*am$UYHVZe<9Me{#;XY_I?9ytl-&nBNastZ_Xt;Je2;*GOis?uMiRV~x2yL<4*kWMExA>P5'
        '7jol%OtV^Dt1Ql3`8B&#s`S{lTC4;6KtpiP<a3fImfvEnAW>h&Zi`!(58rmx(2>V^TTN=b5rlZbT5XS)RZHr!#x0+72h)jzQY{G7'
        'cR`znEOz~MOOH<T4ihDnh<g}{L#XXAsB;JQ98G}R+rlMT`2}&7)koPxAWW<aWJp6=b<QH{QknsExapEf%K@V}Xj5Bo7;gpPhQ;d8'
        'N;mG5U_j754~9b14lqDygwui)qcUb%=j~Xn34{>|>Iai0Q=xIO0Mr?+i5trqxedrQGeE0_3tOkP$7pp9Yj7;GQZPnxVSdNxp&T6p'
        '`D)U37d}s0!IQ>P`F0ypqM7yC>DUS*b!DEh3vneq(g=w)C^Oz))%VK9!5ge}qZ$n4^E+74E5?2fYb_!R`t$*1L7CmuI86Z}a5_?5'
        ';3Pu1N`4TMJ@uAfst%Tvk>*05gV5oj-KUsJ#1Xa9WA^KMPUtYA*sZ&5DRn<TVsV9Gz=HaWWFv<+SmMRHUpZjEPU)c_VpsFqpead9'
        'orE^QK3oqv(e^NW>~+jak`>ePZMhM*A$&2bS3$fsKe{h*&n{l8T$`OCaUX`mx=k)bKO15IkT1-!MG}Vg!4SbRJQ0^1H4<O0xuvJ+'
        '2WUuMPJP6D7)o6*(hT_j2ojC#-CTuSxPB*5hG?LTHAo`Cm?4@q_!i6%KGcErV6Bvg#OlRcT)RU(AF|C--%>}`ILRC);b2V3JRHJm'
        '(BgT&OKg#EblgS*4wRf1R?`e%IwZq41C4Wg-7b@(tp%`mxoU|Izb?fC5jb0L<`bkWyfA+UE9$RH16JnEk~n}QgCxSFwes;z?Q$`F'
        'gnSQQdPe$XYP1FaFDyhyUZVCPC#Q}jGX6?%=EXt^A&GJdf4j1>IJbDMs8R=eD#g>&Iiympbrc37)w(1;D_#{Zh+h>8;&pL5LA-W2'
        '+y|!3o$h<-!_|hn&7CUoQgxl~VtTR~1xZ-vc;WFX%u96B!$dr{)=iHr1EOs&)6)+S{SQnbI*Wh+*J#^CL#%lm1|GZ(--bq!H%gyq'
        'CpFkg6^=IXXxttqf?GO>$G}Yz!k_~!4fs6;W4h_7%#YgV?DIDHz-~;?;dE872prP#SIu|t!D#;Bkn&Ms=75#4!&s6?hYDr0@IiVZ'
        '<QlR~=6bB=dhi-%A>@i`my%np@k~W1Tvf<}8}~ucL9k6uHs>KEK`Z<`GiGe`(1e039|Qx8WCXX?y`Yxi5M?=bX%<kmlT%AAXHTLI'
        'Jcnj&K~uM+(j-wrXvNHoyh6VyFs&M^Z;&8Zy)KQJB07nn!8AuwN#l?K{7DNjwv}02QM^5)tdZN4kb?OfMxtzLfCa^#^ji_I4rEm8'
        'AXH*R=~@KOn}!0#7AZ{@C72fl<j>Koqs$NwN%f;PtMeC2yL3TcgAbKLK-!S3d@cv3NI__|RI;qIlexdMcyQO6HnI<`ySaChg}+@M'
        '*tTua-;O#lFtC;V-L(pTgAYn{{f*qe-rr`i@!*4!>GW>C^Rq=>c6%_qi@VmUUW~gR?E%E}u`#nRS(-2Vm-OsDz8+A9!N0w`8=}lw'
        'U!s!r(FPela;Y>&uuNiLgpp0k1mG!Uup&bYGkgzV%0eV+A%i>elU5Bz0Gp8xXh&^ENcVzz!KVS|my8!9AF#<nH=w|$BRm=jw?B2#'
        'AsoQIop_OqtH3dY&B;L_Mn^#iz|j}kf!^afxoC1hDiEoNAL@u;{0Ctq>Tc2qxyB+Fy&<M5&@Wx9k1!vSAUru0iPX<q*WW0YRFWXm'
        '9MyqN;wVGx%VVUoEFc0JK|wj7`8c1=3`<#TN{MS8g6A_PC+OwQh=g(R|K0SVD{g#4{(qHciF10e8nnBqwNocir&S9eFofC#-U{3|'
        'q~w+)pbx@)S*DJ3&FPA_(&Nj_p`2!*k@z~jT}(U=np1o$uDstJpC7#!)zUEpblF39ek`eBp1`ZPr5m<QH;1XV031P`&L5!fM()jz'
        'YI;!hGyj18|ARyi-kU$9pC2ZA;NJY0et(4M*uD9Zrbjh>NYi7QKCJ0+O;2cgQqxnKp4RjcO&`_tjHZui`naaQr0Fkf`h=#R(DX@7'
        'KdI?cnp&DZt?8#U{j{dPqUmQeeMZyIYC5jzgr=X<^sJ_3O(!+AHJ#G*oTleBy`bquO`p~DlBSn6eNNNoHT}G%FKGIrrY~vw1x;Vp'
        '^c78C)%3cicQh56Zfp9krr*)@yPEz$(;sX46HR}n>4%Cgj2+N7kDHrubMw5pxo&Rmm>Xekw$07E=H@%*=DX(R2j=F-=H@5n=4a;S'
        'Lw%E^CCdH@lK~m)XEm8smeM0(ui$rCJcnn)>V>BgwpnMs?IRhdVk1%xRUbSsKQgS+xI>PrOLKaly;Iu7rG>f0$_;#wo+D2zi@iRf'
        'NVq+dCXw?b=gvcb*KwVyP81WLeU&c8Dl@m{R+m<&c9H&J#j1xuvoaJR=WTIH?6+jzmdM-<a2HvghQd7_xi3Motkf~86rx1~sX`KR'
        'Q>lZyC+LgRit@lxf0o_|gH}FIr|cG^X<+V6$_kp1LR6gafqfMZrYkqs=9U&|zME^i&4M*^v!G~Qs3lN5bohG6sE#0OH)szz$+C#%'
        '-r=e=Y{_yx8_NFvY9Bh=CH8;4pZzG2iH9>R!8ZISepVh*Gm%^lR6};lr3E9l{!9Ev^WcGz5plnH45WF4E|1aWG+myi%agbyqW+$6'
        '76lh#T)3hsHiRcy!cPw=J42)<OY5e`m8~IxJ=aTN#U`bzF8Zm|kc?33)tj%b2e`g0)JV3ixrVOdU<vdLk#;3s?6xs&jSpO^p~&i|'
        '!*g#9iZJkGqFf^33@tl^yy2<Tl;`qb`X9Q8;>o-&Yfu7%?H>T3>uNy7+2{qJQxV7Q=!L1Nt*tHFV_SAT2z~B(Hg}S#dLx{Q`F1>Y'
        '{@JMu7wz*GFI*^m(O}G84>qTqpq@}s_J&&{1Ul8?j?1Ph&ZZ0K*QrjsVI9yQoT^M$FI<uxO`f;gPJ^mZQco^-#kP1;t^8NS+Zi@_'
        'C%gMb0g;H`As`~&pC1#z4dR>s4?F(P!;VD!ybya22^~pyj)!B)&AltzpINBfsV?8Va$|0~Lf*Q%Ji9WtL>1pOmbE0EgP2MOg_gl2'
        '!dR<JYa(H3bJnThco0et9?I<oWyKS{nv^UEqif28c8NIJAO5R&s@Wlb_;1axknekA7vCoW(H374VR|at%<Qk+DYy48dM6?C;X4+6'
        'z-5H^0>ifC1{;e_Tj>aU4f|?A(sRk3#a>Owq-oh+jwuQ5l>JdTioBfJC+KCutw05TUsm_@63{*Y{z-79QqCbMdsf*sA2}9x<;IWX'
        'BI1NiVs5hMGR0jsP_M!`reeiPdX&ki&FgN%t!M6BbzxgOWxoR-7Sdf+%_}6ka%yTvW#=Lq&+UK7YTBNj_w8J!_~>-tQ;pgmnsTN`'
        'RK^){pZ4X4_V%?w$8G#?B!0dK!JLBv@`zfTK#LQDEwUbVcyEBW=<V5GzH{q=k&(q9zqO<zY@Kv<o%@&y6=!o2&PQ8)NI`DO0E#BQ'
        'D$0n$z9#LnZ1{++rEHkK;x(3lMq1CdCrrOsvkU{9ns3A!**0y@4t3R~tjiSAQe<7Z<m;VXs$AIC)%;$t+bC{!)80|L4IQU~4kocl'
        '^VjUS`67wqMrzWkq%Gf;$+${t1CIG}d#$W@@i3g>wtuD#7YHRkUt*UqBklUpo|M}|j73E^n=&O9$(j}!4kaiG$0!_6W2^^3Z!187'
        'V62Pl*9mD6sNZz?mYRrxF_5oc@3aN;>>ym9T2I`}M-=xdFgcg1W^z?~3z}a>a_;2rRYi@H`h-ZJ>hSO})x<rQ>Qs%y^Q5Wkg9as<'
        '^p@ayml=zWR+-#Mvtosl)WHS`?ZD)1bB3WH)ND@@awM-PlK|Ck61U+<6n8Za;q~o4DwbplDc6Bm2z=kzfEO^QWKK5-ZfwDW?m%hP'
        '=DX=KQ)c;gIInp=HS2wqwjKB;y;hple?&m;-nr2R-8-zs)*&Jd%$dX5B(t0-&4~IG2Y1SS?CEJTZ;N%J{Em(G;4EX`?&eea^obqL'
        'B84IAbkj$!(zc$e_*Ljp|EZm0Rj3RB>4B3;PwV<X<l2ev#x~Md=@^hC+N+Q=3kS*txoW{gdgLlrFYX%+;K$P7CoNSWFZ7$x@u1hf'
        'adIU8cmMu<o!l!>wZXkj*Vmwm5fEwq8G(;K#wFSTd^E@LG98UvWL`9ZZhAB~1>|9B5<~JZ@!Wn=11p~zScnhS@c2NXiUE4ShPz00'
        'hmP<T?Qyo@&W4v)N2?q3>DQZoMWBnudlloox??;#otrR~Pi5s4k?BPZxa3KvM4iLID|xS6(0ZodZMi+z>&H~rDW@BB_p<eXua8B@'
        'rCZlK)6TFCmH(&Vtv4?`|9siHaOrvb{H3yW@$xzQ(wD9Ia{q3*)Nk!NwhWMZv-puQ$WVr$z(>3#lr}hi*{UI`SlSw*-q{`lMu8mF'
        'X#M7wvzX5mEJitFw_a6lYj3M*{s|Ulz*L&wC%C<bi5#v&1VO9TXCwbiHu8^q*+}!x>GDIemg5DMyUoAA<B!=e!2JmgSv+nAhL--e'
        ')>0nDZcD}q!<~r(^(3VIXTnghlOEhR=Q}L}PJ4A9=&bx$72h0rNQS^A9e*M1uuC)QtX(2Eywn*zT_2QZ-FycK*O%yvJFax>Pg`?-'
        '6hm>#`YS3{g>+=agbfLXGtAHyod^NCmyD=waRhrPAcc}F4v)_SGZSS~hRjY{nYXLKG~PnxNKZ|ESEFMpz=bMV!330v;4%6rnZTQ&'
        'OYM?+cBN&wY^I$ZTH8_YpW69^?Q9qZ;jRZ*cgTzPE-Uvne_(NGah8(ilZ$<a%?2xcdlilQx;=WOGE==$SzDV`b>mxWg8^FuMwvV^'
        'zeCxeZOw2K^a++wTvpqE<Sfa*NY*BGmRe-7v>z6aEzZu)tX5ZNS8mNsOA$=unbaq?$elMl43<~;;<!imGwzWq3#--Hm6fFxDVT~n'
        'YDVXLEKZAFOgCE0hYq!5{Z`h(%R1wc2Z1boUN*yO@_1E|!AJHbnCYd(t8>?Gu2f7Fypj{l6xg4l?0m|Aci_&3yPoLO2X@nPqlk=1'
        '&IRh|4lL9s_r=fBt=W~Cxz*|Gm6dC9p_bSB(P=L4sqqf-6P@75q(VZ|Nc*ggI#z@<gFK*Pz-NKI3;SVjjM%%eRFS2pSJrx98`JMO'
        'Bv~z>$_aO(fs7HdQd|}pxws!jPE60<xKSl;ZY|wdt4L8H@bq=~(tbKTDLcHmIFs)&efC!1#dMO7j{5q%m{!%f=SA5}N%E^pmEyd<'
        'upc%`l8x!5n~Q5SK3As;ThgCnFl$rsBjZ(rg}rbQ2eI6y0<zL=RJ<Tm1s~+e{f>|3Szg``!^hWV7nWyXJ~vlptJjy-hOC3LuZ7L`'
        'H@$R2YTBhr{%D*O1QnBN$VaDoxm_Nv4Os_XtWq}Vv~2SrT^^##7+ucL<rG~kx_p8zpQFn&ba|F8=jie>U0$Heb-K*ZWrZ$_ba|aF'
        'x9P&^!srsvWrHr;bcsjzDv73twVrj;hh>NyRu)}GH`fS20PrZ6N`<4S7pYZ9A1DXeB{*a4gLAF3-ycY9614+$<h%!O^2%N?Ys4-F'
        'xUp23pfuDJSM~Utz(hg#VkrW~H#H9K+gt92+ooL^S>>SrO|7EWYSwF&dIhtQ{1Jxv(Sn|+Db5f81GiA@a<L{XH>>($u-;p?OFhs}'
        'Q8(N8Ds*1xTK%Gf%2He^W3N1GWT>jAvWcw3(6Mz)q_ngBSyzyz$fH11R;7YR-|q=j83IT#XtfkTMI2mLWdkk`SJu@}FNpC7OBh7F'
        'B+G|Xu?5bdqlfx1R1T_GahSB)kySLf3433gUSmTyy@mq#2e|@zh2sXzKcKAQv0DrP2;hFFDn#>pl!5dmKPUQ=pM{^^H_1-(Z}4RP'
        'etOEBP-@T*t#tXK-}PKnu4mYko8K~{HNTBJ!lVOJ&*$Zjt<Zsh-IDV|)eUtr>3%_sC+<lhy+1!9?k)V{c>l(s7G@%ascO)W^umX`'
        'HPbRbM&7b&!Uj3hmtLp;eNje-ES%5=y)QF@1p24qS^=9;Y?0`GZ`4QIRTRipheU(>18(^DXz|W8|BjaT_v!NQboqO_yicC;Kk4rK'
        'ba#&~Kcvf_?&&?7Z;eu}s(!r(&v~KXIn&o<-iP2ZDe+1M*oz11d)qF#1KM@Dp{{?mu#dfpAsY3+pndbVXo&{4H`Kn!-)8$F%XqPz'
        'y~x`4KW_daYv0C;_F((|$IW*}P5W)U*v_{<kPJR<{%+R(tFV#wiNOI1&y}T!qewtcsKoP((nG0&Qv2>1o%{Gzw)vN%xnfH5uSts!'
        'SLx>we%xL7(W&%I)zLq94XX%nh%N(e&H5j?HLK69HNQ7%JZ_VI54mt>bVvlqT-T3I4Z44|8W!IE^wjX+VE;Ebu(|*7I{*L'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

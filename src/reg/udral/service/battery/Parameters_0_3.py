# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/control/external/public_regulated_data_types/reg/udral/service/battery/Parameters.0.3.dsdl
#
# Generated at:  2024-06-20 11:16:16.480795 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.udral.service.battery.Parameters
# Version:       0.3
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import reg.udral.service.battery
import uavcan.si.unit.electric_charge
import uavcan.si.unit.electric_current
import uavcan.si.unit.mass
import uavcan.si.unit.voltage

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Parameters_0_3:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 unique_id:                    None | int | _np_.uint64 = None,
                 mass:                         None | uavcan.si.unit.mass.Scalar_1_0 = None,
                 design_capacity:              None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 design_cell_voltage_min_max:  None | _NDArray_[_np_.object_] | list[uavcan.si.unit.voltage.Scalar_1_0] = None,
                 discharge_current:            None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 discharge_current_burst:      None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_current:               None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_current_fast:          None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_termination_threshold: None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_voltage:               None | uavcan.si.unit.voltage.Scalar_1_0 = None,
                 cycle_count:                  None | int | _np_.uint16 = None,
                 series_cell_count:            None | int | _np_.uint8 = None,
                 state_of_health_pct:          None | int | _np_.uint8 = None,
                 technology:                   None | reg.udral.service.battery.Technology_0_1 = None,
                 nominal_voltage:              None | uavcan.si.unit.voltage.Scalar_1_0 = None,
                 unix_manufacture_time:        None | int | _np_.uint64 = None,
                 name:                         None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
        """
        reg.udral.service.battery.Parameters.0.3
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param unique_id:                    truncated uint64 unique_id
        :param mass:                         uavcan.si.unit.mass.Scalar.1.0 mass
        :param design_capacity:              uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        :param design_cell_voltage_min_max:  uavcan.si.unit.voltage.Scalar.1.0[2] design_cell_voltage_min_max
        :param discharge_current:            uavcan.si.unit.electric_current.Scalar.1.0 discharge_current
        :param discharge_current_burst:      uavcan.si.unit.electric_current.Scalar.1.0 discharge_current_burst
        :param charge_current:               uavcan.si.unit.electric_current.Scalar.1.0 charge_current
        :param charge_current_fast:          uavcan.si.unit.electric_current.Scalar.1.0 charge_current_fast
        :param charge_termination_threshold: uavcan.si.unit.electric_current.Scalar.1.0 charge_termination_threshold
        :param charge_voltage:               uavcan.si.unit.voltage.Scalar.1.0 charge_voltage
        :param cycle_count:                  saturated uint16 cycle_count
        :param series_cell_count:            saturated uint8 series_cell_count
        :param state_of_health_pct:          saturated uint7 state_of_health_pct
        :param technology:                   reg.udral.service.battery.Technology.0.1 technology
        :param nominal_voltage:              uavcan.si.unit.voltage.Scalar.1.0 nominal_voltage
        :param unix_manufacture_time:        truncated uint40 unix_manufacture_time
        :param name:                         saturated uint8[<=64] name
        """
        self._unique_id:                    int
        self._mass:                         uavcan.si.unit.mass.Scalar_1_0
        self._design_capacity:              uavcan.si.unit.electric_charge.Scalar_1_0
        self._design_cell_voltage_min_max:  _NDArray_[_np_.object_]
        self._discharge_current:            uavcan.si.unit.electric_current.Scalar_1_0
        self._discharge_current_burst:      uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_current:               uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_current_fast:          uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_termination_threshold: uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_voltage:               uavcan.si.unit.voltage.Scalar_1_0
        self._cycle_count:                  int
        self._series_cell_count:            int
        self._state_of_health_pct:          int
        self._technology:                   reg.udral.service.battery.Technology_0_1
        self._nominal_voltage:              uavcan.si.unit.voltage.Scalar_1_0
        self._unix_manufacture_time:        int
        self._name:                         _NDArray_[_np_.uint8]

        self.unique_id = unique_id if unique_id is not None else 0  # type: ignore

        if mass is None:
            self.mass = uavcan.si.unit.mass.Scalar_1_0()
        elif isinstance(mass, uavcan.si.unit.mass.Scalar_1_0):
            self.mass = mass
        else:
            raise ValueError(f'mass: expected uavcan.si.unit.mass.Scalar_1_0 '
                             f'got {type(mass).__name__}')

        if design_capacity is None:
            self.design_capacity = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(design_capacity, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.design_capacity = design_capacity
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(design_capacity).__name__}')

        if design_cell_voltage_min_max is None:
            self.design_cell_voltage_min_max = _np_.array([uavcan.si.unit.voltage.Scalar_1_0() for _ in range(2)], _np_.object_)
        else:
            if isinstance(design_cell_voltage_min_max, _np_.ndarray) and design_cell_voltage_min_max.dtype == _np_.object_ and design_cell_voltage_min_max.ndim == 1 and design_cell_voltage_min_max.size == 2:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._design_cell_voltage_min_max = design_cell_voltage_min_max
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                design_cell_voltage_min_max = _np_.array(design_cell_voltage_min_max, _np_.object_).flatten()
                if not design_cell_voltage_min_max.size == 2:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'design_cell_voltage_min_max: invalid array length: not {design_cell_voltage_min_max.size} == 2')
                self._design_cell_voltage_min_max = design_cell_voltage_min_max
            assert isinstance(self._design_cell_voltage_min_max, _np_.ndarray)
            assert self._design_cell_voltage_min_max.dtype == _np_.object_  # type: ignore
            assert self._design_cell_voltage_min_max.ndim == 1
            assert len(self._design_cell_voltage_min_max) == 2

        if discharge_current is None:
            self.discharge_current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(discharge_current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.discharge_current = discharge_current
        else:
            raise ValueError(f'discharge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(discharge_current).__name__}')

        if discharge_current_burst is None:
            self.discharge_current_burst = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(discharge_current_burst, uavcan.si.unit.electric_current.Scalar_1_0):
            self.discharge_current_burst = discharge_current_burst
        else:
            raise ValueError(f'discharge_current_burst: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(discharge_current_burst).__name__}')

        if charge_current is None:
            self.charge_current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_current = charge_current
        else:
            raise ValueError(f'charge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_current).__name__}')

        if charge_current_fast is None:
            self.charge_current_fast = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_current_fast, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_current_fast = charge_current_fast
        else:
            raise ValueError(f'charge_current_fast: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_current_fast).__name__}')

        if charge_termination_threshold is None:
            self.charge_termination_threshold = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_termination_threshold, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_termination_threshold = charge_termination_threshold
        else:
            raise ValueError(f'charge_termination_threshold: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_termination_threshold).__name__}')

        if charge_voltage is None:
            self.charge_voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(charge_voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.charge_voltage = charge_voltage
        else:
            raise ValueError(f'charge_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(charge_voltage).__name__}')

        self.cycle_count = cycle_count if cycle_count is not None else 0  # type: ignore

        self.series_cell_count = series_cell_count if series_cell_count is not None else 0  # type: ignore

        self.state_of_health_pct = state_of_health_pct if state_of_health_pct is not None else 0  # type: ignore

        if technology is None:
            self.technology = reg.udral.service.battery.Technology_0_1()
        elif isinstance(technology, reg.udral.service.battery.Technology_0_1):
            self.technology = technology
        else:
            raise ValueError(f'technology: expected reg.udral.service.battery.Technology_0_1 '
                             f'got {type(technology).__name__}')

        if nominal_voltage is None:
            self.nominal_voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(nominal_voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.nominal_voltage = nominal_voltage
        else:
            raise ValueError(f'nominal_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(nominal_voltage).__name__}')

        self.unix_manufacture_time = unix_manufacture_time if unix_manufacture_time is not None else 0  # type: ignore

        if name is None:
            self.name = _np_.array([], _np_.uint8)
        else:
            name = name.encode() if isinstance(name, str) else name  # Implicit string encoding
            if isinstance(name, (bytes, bytearray)) and len(name) <= 64:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._name = _np_.frombuffer(name, _np_.uint8)  # type: ignore
            elif isinstance(name, _np_.ndarray) and name.dtype == _np_.uint8 and name.ndim == 1 and name.size <= 64:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._name = name
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                name = _np_.array(name, _np_.uint8).flatten()
                if not name.size <= 64:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'name: invalid array length: not {name.size} <= 64')
                self._name = name
            assert isinstance(self._name, _np_.ndarray)
            assert self._name.dtype == _np_.uint8  # type: ignore
            assert self._name.ndim == 1
            assert len(self._name) <= 64

    @property
    def unique_id(self) -> int:
        """
        truncated uint64 unique_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, x: int | _np_.uint64) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 18446744073709551615:
            self._unique_id = x
        else:
            raise ValueError(f'unique_id: value {x} is not in [0, 18446744073709551615]')

    @property
    def mass(self) -> uavcan.si.unit.mass.Scalar_1_0:
        """
        uavcan.si.unit.mass.Scalar.1.0 mass
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mass

    @mass.setter
    def mass(self, x: uavcan.si.unit.mass.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.mass.Scalar_1_0):
            self._mass = x
        else:
            raise ValueError(f'mass: expected uavcan.si.unit.mass.Scalar_1_0 got {type(x).__name__}')

    @property
    def design_capacity(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._design_capacity

    @design_capacity.setter
    def design_capacity(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._design_capacity = x
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def design_cell_voltage_min_max(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.unit.voltage.Scalar.1.0[2] design_cell_voltage_min_max
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._design_cell_voltage_min_max

    @design_cell_voltage_min_max.setter
    def design_cell_voltage_min_max(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.voltage.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size == 2:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._design_cell_voltage_min_max = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size == 2:  # Length cannot be checked before casting and flattening
                raise ValueError(f'design_cell_voltage_min_max: invalid array length: not {x.size} == 2')
            self._design_cell_voltage_min_max = x
        assert isinstance(self._design_cell_voltage_min_max, _np_.ndarray)
        assert self._design_cell_voltage_min_max.dtype == _np_.object_  # type: ignore
        assert self._design_cell_voltage_min_max.ndim == 1
        assert len(self._design_cell_voltage_min_max) == 2

    @property
    def discharge_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 discharge_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._discharge_current

    @discharge_current.setter
    def discharge_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._discharge_current = x
        else:
            raise ValueError(f'discharge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def discharge_current_burst(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 discharge_current_burst
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._discharge_current_burst

    @discharge_current_burst.setter
    def discharge_current_burst(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._discharge_current_burst = x
        else:
            raise ValueError(f'discharge_current_burst: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_current

    @charge_current.setter
    def charge_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_current = x
        else:
            raise ValueError(f'charge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_current_fast(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_current_fast
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_current_fast

    @charge_current_fast.setter
    def charge_current_fast(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_current_fast = x
        else:
            raise ValueError(f'charge_current_fast: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_termination_threshold(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_termination_threshold
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_termination_threshold

    @charge_termination_threshold.setter
    def charge_termination_threshold(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_termination_threshold = x
        else:
            raise ValueError(f'charge_termination_threshold: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 charge_voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_voltage

    @charge_voltage.setter
    def charge_voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._charge_voltage = x
        else:
            raise ValueError(f'charge_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    @property
    def cycle_count(self) -> int:
        """
        saturated uint16 cycle_count
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, x: int | _np_.uint16) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._cycle_count = x
        else:
            raise ValueError(f'cycle_count: value {x} is not in [0, 65535]')

    @property
    def series_cell_count(self) -> int:
        """
        saturated uint8 series_cell_count
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._series_cell_count

    @series_cell_count.setter
    def series_cell_count(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._series_cell_count = x
        else:
            raise ValueError(f'series_cell_count: value {x} is not in [0, 255]')

    @property
    def state_of_health_pct(self) -> int:
        """
        saturated uint7 state_of_health_pct
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._state_of_health_pct

    @state_of_health_pct.setter
    def state_of_health_pct(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 127:
            self._state_of_health_pct = x
        else:
            raise ValueError(f'state_of_health_pct: value {x} is not in [0, 127]')

    @property
    def technology(self) -> reg.udral.service.battery.Technology_0_1:
        """
        reg.udral.service.battery.Technology.0.1 technology
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._technology

    @technology.setter
    def technology(self, x: reg.udral.service.battery.Technology_0_1) -> None:
        if isinstance(x, reg.udral.service.battery.Technology_0_1):
            self._technology = x
        else:
            raise ValueError(f'technology: expected reg.udral.service.battery.Technology_0_1 got {type(x).__name__}')

    @property
    def nominal_voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 nominal_voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._nominal_voltage

    @nominal_voltage.setter
    def nominal_voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._nominal_voltage = x
        else:
            raise ValueError(f'nominal_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    @property
    def unix_manufacture_time(self) -> int:
        """
        truncated uint40 unix_manufacture_time
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._unix_manufacture_time

    @unix_manufacture_time.setter
    def unix_manufacture_time(self, x: int | _np_.uint64) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1099511627775:
            self._unix_manufacture_time = x
        else:
            raise ValueError(f'unix_manufacture_time: value {x} is not in [0, 1099511627775]')

    @property
    def name(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=64] name
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .name.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._name

    @name.setter
    def name(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 64:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._name = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 64:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._name = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 64:  # Length cannot be checked before casting and flattening
                raise ValueError(f'name: invalid array length: not {x.size} <= 64')
            self._name = x
        assert isinstance(self._name, _np_.ndarray)
        assert self._name.dtype == _np_.uint8  # type: ignore
        assert self._name.ndim == 1
        assert len(self._name) <= 64

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_u64(self.unique_id)
        _ser_.pad_to_alignment(8)
        self.mass._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.design_capacity._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert len(self.design_cell_voltage_min_max) == 2, 'self.design_cell_voltage_min_max: uavcan.si.unit.voltage.Scalar.1.0[2]'
        # Element offset: concat(pad(8,concat(pad(8,concat(pad(8,concat(pad(1,pad(8,{0})),{64})),pad(8,{32}))),pad(8,{32}))),repeat(<=1,pad(8,{32})))
        for _elem0_ in self.design_cell_voltage_min_max:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.discharge_current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.discharge_current_burst._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_current_fast._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_termination_threshold._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u16(max(min(self.cycle_count, 65535), 0))
        _ser_.skip_bits(8)
        _ser_.add_aligned_u8(max(min(self.series_cell_count, 255), 0))
        _ser_.add_aligned_unsigned(max(min(self.state_of_health_pct, 127), 0), 7)
        _ser_.skip_bits(1)
        _ser_.pad_to_alignment(8)
        self.technology._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.nominal_voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_unsigned(self.unix_manufacture_time, 40)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.name) <= 64, 'self.name: saturated uint8[<=64]'
        _ser_.add_aligned_u8(len(self.name))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.name)
        _ser_.pad_to_alignment(8)
        assert 512 <= (_ser_.current_bit_length - _base_offset_) <= 1024, \
            'Bad serialization of reg.udral.service.battery.Parameters.0.3'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Parameters_0_3:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "unique_id"
        _f0_ = _des_.fetch_aligned_u64()
        # Temporary _f1_ holds the value of "mass"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.mass.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "design_capacity"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "design_cell_voltage_min_max"
        _des_.pad_to_alignment(8)
        _f3_ = _np_.empty(2, _np_.object_)  # type: ignore
        for _i0_ in range(2):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f3_[_i0_] = _e0_
        assert len(_f3_) == 2, 'uavcan.si.unit.voltage.Scalar.1.0[2]'
        _des_.pad_to_alignment(8)
        # Temporary _f4_ holds the value of "discharge_current"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "discharge_current_burst"
        _des_.pad_to_alignment(8)
        _f5_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f6_ holds the value of "charge_current"
        _des_.pad_to_alignment(8)
        _f6_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f7_ holds the value of "charge_current_fast"
        _des_.pad_to_alignment(8)
        _f7_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f8_ holds the value of "charge_termination_threshold"
        _des_.pad_to_alignment(8)
        _f8_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f9_ holds the value of "charge_voltage"
        _des_.pad_to_alignment(8)
        _f9_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f10_ holds the value of "cycle_count"
        _f10_ = _des_.fetch_aligned_u16()
        # Temporary _f11_ holds the value of ""
        _des_.skip_bits(8)
        # Temporary _f12_ holds the value of "series_cell_count"
        _f12_ = _des_.fetch_aligned_u8()
        # Temporary _f13_ holds the value of "state_of_health_pct"
        _f13_ = _des_.fetch_aligned_unsigned(7)
        # Temporary _f14_ holds the value of ""
        _des_.skip_bits(1)
        # Temporary _f15_ holds the value of "technology"
        _des_.pad_to_alignment(8)
        _f15_ = reg.udral.service.battery.Technology_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f16_ holds the value of "nominal_voltage"
        _des_.pad_to_alignment(8)
        _f16_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f17_ holds the value of "unix_manufacture_time"
        _f17_ = _des_.fetch_aligned_unsigned(40)
        # Temporary _f18_ holds the value of "name"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 64:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 64')
        _f18_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
        assert len(_f18_) <= 64, 'saturated uint8[<=64]'
        self = Parameters_0_3(
            unique_id=_f0_,
            mass=_f1_,
            design_capacity=_f2_,
            design_cell_voltage_min_max=_f3_,
            discharge_current=_f4_,
            discharge_current_burst=_f5_,
            charge_current=_f6_,
            charge_current_fast=_f7_,
            charge_termination_threshold=_f8_,
            charge_voltage=_f9_,
            cycle_count=_f10_,
            series_cell_count=_f12_,
            state_of_health_pct=_f13_,
            technology=_f15_,
            nominal_voltage=_f16_,
            unix_manufacture_time=_f17_,
            name=_f18_)
        _des_.pad_to_alignment(8)
        assert 512 <= (_des_.consumed_bit_length - _base_offset_) <= 1024, \
            'Bad deserialization of reg.udral.service.battery.Parameters.0.3'
        assert isinstance(self, Parameters_0_3)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'unique_id=%s' % self.unique_id,
            'mass=%s' % self.mass,
            'design_capacity=%s' % self.design_capacity,
            'design_cell_voltage_min_max=%s' % _np_.array2string(self.design_cell_voltage_min_max, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'discharge_current=%s' % self.discharge_current,
            'discharge_current_burst=%s' % self.discharge_current_burst,
            'charge_current=%s' % self.charge_current,
            'charge_current_fast=%s' % self.charge_current_fast,
            'charge_termination_threshold=%s' % self.charge_termination_threshold,
            'charge_voltage=%s' % self.charge_voltage,
            'cycle_count=%s' % self.cycle_count,
            'series_cell_count=%s' % self.series_cell_count,
            'state_of_health_pct=%s' % self.state_of_health_pct,
            'technology=%s' % self.technology,
            'nominal_voltage=%s' % self.nominal_voltage,
            'unix_manufacture_time=%s' % self.unix_manufacture_time,
            'name=%s' % repr(bytes(self.name))[1:],
        ])
        return f'reg.udral.service.battery.Parameters.0.3({_o_0_})'

    _EXTENT_BYTES_ = 300

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8fDd$L0{`t>Z;Tz+Rp0fW?E2Y`<8B<&h9<X8;_f!P6MO9_p%&ovdR@D_`*!i#uItts&zre#@7<j@^E!Wa_qhsk_){7>5`j!n'
        'Bn0FGsD&@I;uA<k6-W>vA;K5<P$88MAOuxGsGxw5!tdNWGjHB|^X#rs5FZlB=gr<f=bU@)`FGE~xwr4De|cs^{g*u5?l__28fM4?'
        'X}R*Q)o{6C+J39;hce=6a`+;5WecCqwN9I-Z=_SNrmv)v$s?xpJRYQCBsshm1+g8)0q-5M-}I~&P&^y(bt85H%QZk|OWNFMSW(1-'
        'j<IS57=q6*O~%bF{7T;=oMSh#?>ExLk;T1VN?%QrgC=GLvJpo-OmBn05bldnX|n&4<gU|Ysb)G>WSJ51Ic$16p!LcvjF`CYg>v2F'
        '&J{1>>pbXP-$An>Bh%&HdL+`t^FVG}VPv*^ho|Dh$rGzNBARB*qi>nIu%gkQPp_uQ<7OCHo?``08PS*HhNvY6Vo!b{=B9MgWS{By'
        'c6#$Wdqzg)7^XxrjHGS3Zinen%!^wM9<WGQ5wk6iH8_hy?y$&b(&1htn;mq@kntVMj#wsr*7O7B`s?e`TW4T|InrA9d_vCJaR3eA'
        'p;5a=^R_G(WJ2M`u0z<Rw`D<QUPL4!!80;ZhxtwQcfi|z5D{VzYX+Y#4?`v+24rARl02ahtZfBRJ||a-+LfNaSs1qoS;*EdtW9Uw'
        'p`k7AIauSi)gdO@emi!pi0gGWY1@fbGw@q1+V<J})%lq-v-50{_JNk^$|=1pFcf~W#@GxyGs{|7KBGOCO^6ul!_I_dA#%0_x)2;D'
        'F-B;Cb#mGA;-;l+AgDv5r*eEQw;qTvUngPA@Ll9&CWMJS&q~NI(h8qvYf543YS*Xw#pU=|lIKUc+`3}RIB!8>w(zmN%nHCxU}07O'
        '1%RluCSlv_zLF&r3NzJ6&RRSu$sT&>d!fOu0kiKx83i;M-Cu}hz%d|F`qjG~*eGaEl@1#z^!}K(Eb${^Ec>b@ABn9k2+jzlfsv8X'
        'vck|<!&D2-=a6`GaddHn+=DoJJ1rsjaB|?1>swKe$%>~InRr@!Y;lAPP(1r(*lY{RAfp(DnH*>a5Hqa`-sn>Hjmf`wbfo;>d+)tB'
        'vN-xBU{IzyzA0fu@MEbsnT(*#N+wF4%4~GBAABVhKOs(qa2pP9LyFi+Cw(n>)NINf?wGVyWbXCks2TckU~_c1+-zHL3dtD#xUvBz'
        'SK*m=R;l$3IHA!O;2?xges)h=VxaANQQ*5+0pEc>cosgNY{v~(+9n*aG7_ij2C>vfw1j~m1cH4eW&Dtw)8vSjv~k)vWstK>Bl27m'
        'rm#YA7GRgn%%`WXiId_d;j9`i=AF!aYuB@3VATJ2njE?yqb2qC8ve{SD%orL?KEM-kc6F90|sn^lV#rW;kjw2R@ywUB0nexDO*VR'
        'e{nlGvT8XF{L#Q5(V*UX>|&Xn{$5~EJ|g|4baIis9ySoA+8R;1I372!+?MpxMMfXi4t<PK0DzP+dvTnmjl3R0&G=5+@>E2t$BnR|'
        'G)K!ATJy(bLy;fBAyQMHL!5@YwB4A9s^+$3Z(8KErx|y-jotR79ZtjZW0R?sd^t>uS@Di^C0RG(cMBtA6Mb;7%kThsj36V0Iy%yh'
        'asr#u<1I^tfg(QVJZ*6yZG_2M-KrD5*xU5{ZEvXgKG$cynq%mq4R^85e+WxH(__0Y!D_|J;@tgh5>^nqeyfp^PQoI^d05}iiJuO|'
        'h1bM<U0f8OniQAC74d1YD3-*ssEZY`njGolE)`cv-^F#M+v0}!tl~v{UYLdQIK`LHotwF?h!&}c@W8i^f9;Y&h_I^#M;uP^0m%b4'
        '79o@r;-^R<pir_Ew=%`h9Oc_UI)IIi*y&TJo?~nN<!KhSxs4!$Ep6zy(kca|-u;0?sLq^%!0I3|xkMgGTjd-z_2xZ?O^Ascyw0Oa'
        'oBh$g&EE1|#M<|3llKw&o*n*O@mmkr;jxUR_kU-T1Kk~6+*3{AcJiUCyv>m~Rl2V|<|a*Th;J%l=RxfJP&IloS0nDaX0}RlPRcKd'
        'lQ+LVIx?cPN_tAGCK19(n;aQx)tXX%BPuCgJ|yoCc&K~?kzg5#`>S28q@e~|*s)q|mw%Fdan^Wwnw>RfUtu>?0)Yf0!xu8!4?w8x'
        'dn$j;Y3AMMm^8Sd^BLq34LG>Fpk2(in($UN>Ma)bLS{OMS@3$?V;BJ`P#iSajcgeW?)uxBf9a_d2@cY4P;di!Ck}{-0wo%Fp8AqB'
        'J|5O6rKM;~97{^<am*>OTMd7U=dvwCH-rkJH1|jsaCBgez=Ato*K43&9@!c7T9-PjqCU(epB(Cv<A5Ui`(&<<VDphc_89D6i+3Ji'
        'u#fd~_kZG(j}|-KC3`Y?`D*FhL3x(+Vm}T`YLN}@KhgB=#Giw}@c{y6BMw4EW??zAzZ{!N!!u<GttLm(TugT;2<TG=Me-L}2p&Br'
        'tf2Ym;EG-xvZCECXQFQ{O-nCjtBjvm2b)5!3;G>SPM;e}2SRlQRmT=9rn86*ttSJa)hnZTAcH@eF_@b^{H+-Y7>n>JKRlUiEO^e0'
        '-<&DztSkI%l)>inzHBeLeuQlc@++dW1|(o%;Z^A9Q{d_4?l($1Qv|1z$>+N%VeT#_=}-p~njxE?>d^|7$z}dm;|j<<WpXW_4k>Zy'
        '<KW4{m><iGS=qoryMsi}L?)$m<t^eUt27irVWy<}G#ux_TRiY7Gb~fZ`aQmFFiJd;%m&a`PKp}<w`?Js{ERAH;N*o^NT()d4Ix0N'
        'Bt;QQK-50YIJ}93Rm*iEIg};(y_Fy2JRhmfdA5A2v5eoqPdUwjG{)gBYH%^iUscL$yezMygcs*M6@Uw=wfm&TNiDEY4_*y>hFGJg'
        'Q5ftmv>*q!g_5I6%<}o&V5h4r6#k^e)*y~J9J;q-n%CD9uM>0x=ceB@1-D!rtJ=2W*8Cjw%Z6lc*NAUK?SZohY_mb;yB<?T2VDX8'
        'o9C#0Kpd%h%PBS)dvQqeogy_v1_0&d+f&5c#$F^MIe#1D`5)kLbcnpWk?TH{#B1CZo{xigN5?G{d34;GeDL1w*QdOU^h7c~PpW8n'
        'QAvS@&Rw~7dEqKa@2axdf)S<lREH@tB<W>kI4Fb)@V;lTRaaR<7&lrng5I}r6jfyuNZCN>N<Nw^F3ynfA#{lBsZx$#RhV$l&vkcG'
        'oLkI7F9o!XsglTtEn|G?in+EjzcfoLd1gt1(YQ4O=zASHeYk!g9XO#SIfG&D>=ejs%of{6Bx}1Q`3Oi}n7>H`&kiN{JW?PZZkG4*'
        'fO!=h9NZ-bW8h%9zM|HAC1(K%?7HPqPU=X1Cnvb<t;|j#B{tTPeY$!m3>jNWHrZ|Zu^Sb99oi*d`)}1v&DHoV_{*6&84MzQe78vF'
        'mNKM==G+(}#ab&7AKNA3!{C;rXx1;EonImXmlfB8f}CMitL1x2bop*(H4L{CLD1Hw#qQEv+X@=KS0T!$9+tUV^-Q@}hB8N#@52~;'
        '<rY$}IO;rr$ESD6<H4NA#g)s%;iraj*hWSG4*>azjuYtC0X{8v6Y<UC6`Zk$Fwv#?6=Le#Qlaz>#0-|12IY6E{Hy9f3}>v37~$bW'
        'W)Cwk=Mxo-I1j_frBz~t<&4O{_gGu_VOvmL99DXXudbY}pvE79T77w*s6Cfc^Q67WsX&+SN?8trB%2RIa(=FgWJbtRMoaBONUlGO'
        'OqbQ>9?wa3mp6on*d>vD6jzAE<GFtgW49Rxv|VczTP1gi|B%*Db9LqVyfU7ZB{}b}%u=vz`!NzI94A_gDiVG$%?8!Atf`pcb`Y9R'
        'P?~dMNv`@Qj6oK?hhg#3YL~?enWp~mJmwQ}{wlcgcN-4sh<%Ek$LmVZW?Gz%8{}9jcYfy~2+Ut30*__{Y|Cju(u1fw4}tntolqal'
        'P?JL*#C!K4@LpOd<0T(6i1&-T#k+dJoKx=Pz!JA`YPE6b7{K~7yVWa&)m&ScTUt<ZK04=yephSOmgWYD{OoS+cj4la;{4eK9cR?-'
        'oy{CSMt(ozS{<BhvP!34kxabZrN^n}Gr93`^lv;vz##Am0_O<4L|}oy9Dx-Aiv&JP;5q@DfJvZ5KoZy{5E6Kmz$*m4Lf{t&e3ig2'
        '6ZlO6zeeD92>dpI-zV^U1inS!4+#7jfj=SeR|Nioz;_7z4S~NW@OK3Mg}^@(_)h}=PGIjIfcNO@Fnt{$aGbydKs=<>mF&g2CQbIM'
        'lTDh8<u_`{Sa!NelZo#6#yDl1?%u_zI@nDCiWjo8wk>!|h7rD~Jg<tnbmdGQW=4A$qqd?;j>QFU!1ZB8T@>lED;+hckda;Rl+QH{'
        'uIn)RIzPMdb+XG{eI2ArHqs-i>U7dysVM3!VJD=^DViOsOhzAg+wH)|8HeI}cW6X4pY_2P0#aR1Sss|xzEdrIni$N;Vl_=3WL)ZF'
        'vo4mn^vWTcQAcfc|3xx$AwLWyxzr>Mf@HEFpbmQQyt}A5j+bkW<HE<kVKv8ER64?*O#Ex51(pw$gEDpb7EY7vLrOsEqW{4%9jr<n'
        '@#x%Tx#hCduc&f{ZZ8T`y(I!wV(Kqe!5d{|nw&@d7{RD5r~{Qnf~N-oY<6~yWf5E<+E%5IIE>X}fo$tuK5d+3H`E3VEqF}Ai#?MU'
        'JdVYl+%Zd66DHN2Xhmz+a?$L_7K!G1{mM<Y(DteHf-&9FUcSC<D=c4fIMeKIR`RO841F^>euG}iz+DczQxm^l?SB7o@qF^3{OVi1'
        'qR8&tdPhH_M-RDUIyUcn^xD9yyd|f5D!L>OxJQqw2DP`0>iAVE^W5*w>Jf8O--Ms9umoiVBf?)E*+XV9xj3rrAh(BD*#i$VV_6=*'
        '-?01=T|KVAM*h*9S9;GPVr<b&0Lvx0!+>@oXb_Yzv;)~z)}z!Gt|KoYv4vI}N4xGmzCcwh?ie-gS|ty)!z?|lQSV~P&yjlFOZhI0'
        '5u?Q&o1<R%=(b#qb$k@hi6=xPCPgZ?#Gi^^75^aK7XKvvQG8!~PyCzsSMeX>2jaiPyBi~L`r^Mgj!?8YNZ=TOqXbS<$a#{!UZk%x'
        '1kMq7i2x_?<M#<j8&A=QrwK3u9|K4xx{vh`g3k1ZAfmC>qUT&)Kah=QEgpt+56rHph(V96+>W}lQZl1@zZFM*OO?_aMI6gq6p5^5'
        'snK+=l}C*HT0rC0cpXF#N8bS|DQkxE$av9;EVibrakloLli0)V#pm+ejV0-Ac3+;Ul4?!@6jfC;do_mBe^6X|mKY(8;F5x>E@;!E'
        'FDx*0{cXBk@bt@#(4S`dnh$PGUuUXEI-!a}O;!K%>`pB!1(P?0r&o6;>Y<;<P8qZ8^4;lzd3bg|peK0UXL=bME34P8tkmb0h>f+S'
        'mCs-ubFN!{+@ZBNi{sg2y)YLP`CU~nMi3-?+cM-v?GliAKAD(~Hp<Kzg`v><lM~ss#wSjcX?5AFTlEJ=)1qx-c~6#CZmi;qeANfz'
        'KN$bP`2XGba*RG-&Q^=(CMw#BJ31`iLF=7vYd*NI`73(xJ+$5%9NgFZEj{?#X#Mu!;J)U+)q}r_*6$7u?rYYAmq$h^<rp0pKG=~>'
        'VARekCJc0B6V6ln`HBex9od9C)PAR8!a&D2^@MxWey?Z3Xk6J*-q6Rep?d!7H0<??`2!vONt>SkCJlSDV*Wr!_58PJ*jp9z2Rh30'
        '$BOx1qhVjGm_N`_o<Ca5|2hr(dWFFIJ2oa^EPBp2sOuXQa|SxHO?rpg->G17prg#>WWnUSH0<4q`TZRmpDvh0Dh(apSE1Z}9XekY'
        '2gM=rn7$T$0!ii;63n-eTz(IU<qyQW$S3y|`J_rEkB{c5<e4IYq}=iUb+Wo40E*mnW0UgNF_Ruddr`W4=Rop=>16+3OF&oP4u1L%'
        'R_y)<s|xoz@Ytw3_+~zMa^rLOT%I1i-|^_qfx#+)_Ir$s{XlgM!T2A9u(QwFGXMY'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
